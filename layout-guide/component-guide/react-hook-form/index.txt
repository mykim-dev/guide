1:"$Sreact.fragment"
2:I[80073,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"default"]
3:I[84056,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"default"]
4:I[72090,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"ClientSegmentRoot"]
5:I[44734,["/_next/static/chunks/aab33f93238a3d30.js","/_next/static/chunks/00d84bc5e49d1a4a.js","/_next/static/chunks/52782943b6dbb633.js","/_next/static/chunks/bed9d3fbf6fe290c.js","/_next/static/chunks/a33a8ec18379c2de.js","/_next/static/chunks/ce8cda706e39020c.js"],"default"]
8:I[20306,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"OutletBoundary"]
a:I[89997,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"AsyncMetadataOutlet"]
c:I[20306,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"ViewportBoundary"]
e:I[20306,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"MetadataBoundary"]
f:"$Sreact.suspense"
11:I[63551,[],"default"]
:HL["/_next/static/chunks/9f3ede831574968e.css","style"]
:HL["/_next/static/chunks/223054d60a666c2b.css","style"]
:HL["/_next/static/media/fca78c2ee6cec166-s.p.a2d50d65.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
0:{"P":null,"b":"SZQNiefU0qLzZyRIKaTWx","p":"","c":["","layout-guide","component-guide","react-hook-form",""],"i":false,"f":[[["",{"children":["layout-guide",{"children":["component-guide",{"children":[["slug","react-hook-form","d"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/9f3ede831574968e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/223054d60a666c2b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"ko","suppressHydrationWarning":true,"children":["$","body",null,{"className":"noto_sans_kr_43737ebe-module__lI5GDW__className","children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]}]]}],{"children":["layout-guide",["$","$1","c",{"children":[[["$","script","script-0",{"src":"/_next/static/chunks/aab33f93238a3d30.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/00d84bc5e49d1a4a.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/52782943b6dbb633.js","async":true,"nonce":"$undefined"}],["$","script","script-3",{"src":"/_next/static/chunks/bed9d3fbf6fe290c.js","async":true,"nonce":"$undefined"}],["$","script","script-4",{"src":"/_next/static/chunks/a33a8ec18379c2de.js","async":true,"nonce":"$undefined"}],["$","script","script-5",{"src":"/_next/static/chunks/ce8cda706e39020c.js","async":true,"nonce":"$undefined"}]],["$","$L4",null,{"Component":"$5","slots":{"children":["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]},"params":{},"promise":"$@6"}]]}],{"children":["component-guide",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","react-hook-form","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",[["$","script","script-0",{"src":"/_next/static/chunks/268d28324fc6bd1f.js","async":true,"nonce":"$undefined"}],["$","script","script-1",{"src":"/_next/static/chunks/be87742a758358a1.js","async":true,"nonce":"$undefined"}],["$","script","script-2",{"src":"/_next/static/chunks/b0be061abc067b72.js","async":true,"nonce":"$undefined"}],["$","script","script-3",{"src":"/_next/static/chunks/190306cb4507deb3.js","async":true,"nonce":"$undefined"}],["$","script","script-4",{"src":"/_next/static/chunks/9dd3281d95ca7446.js","async":true,"nonce":"$undefined"}]],["$","$L8",null,{"children":["$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Le",null,{"children":["$","div",null,{"hidden":true,"children":["$","$f",null,{"fallback":null,"children":"$L10"}]}]}]]}],false]],"m":"$undefined","G":["$11",[["$","link","0",{"rel":"stylesheet","href":"/_next/static/chunks/9f3ede831574968e.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/chunks/223054d60a666c2b.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]]],"s":false,"S":true}
6:"$0:f:0:1:2:children:1:props:children:1:props:params"
12:I[75464,["/_next/static/chunks/aab33f93238a3d30.js","/_next/static/chunks/00d84bc5e49d1a4a.js","/_next/static/chunks/52782943b6dbb633.js","/_next/static/chunks/bed9d3fbf6fe290c.js","/_next/static/chunks/a33a8ec18379c2de.js","/_next/static/chunks/ce8cda706e39020c.js","/_next/static/chunks/268d28324fc6bd1f.js","/_next/static/chunks/be87742a758358a1.js","/_next/static/chunks/b0be061abc067b72.js","/_next/static/chunks/190306cb4507deb3.js","/_next/static/chunks/9dd3281d95ca7446.js"],"MarkdownRenderer"]
13:T264b,
## 기본 사용법

```tsx
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

const formSchema = z.object({
  name: z.string().min(2, "이름은 최소 2글자 이상이어야 합니다"),
  email: z.string().email("올바른 이메일 주소를 입력하세요"),
  age: z.number().min(18, "18세 이상이어야 합니다")
})

type FormData = z.infer<typeof formSchema>

export default function BasicForm() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(formSchema)
  })

  const onSubmit = async (data: FormData) => {
    await new Promise(resolve => setTimeout(resolve, 1000))
    console.log("폼 데이터:", data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 max-w-md">
      <div className="space-y-2">
        <Label htmlFor="name">이름</Label>
        <Input
          id="name"
          {...register("name")}
          placeholder="이름을 입력하세요"
        />
        {errors.name && (
          <p className="text-sm text-red-600">{errors.name.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="email">이메일</Label>
        <Input
          id="email"
          type="email"
          {...register("email")}
          placeholder="이메일을 입력하세요"
        />
        {errors.email && (
          <p className="text-sm text-red-600">{errors.email.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="age">나이</Label>
        <Input
          id="age"
          type="number"
          {...register("age", { valueAsNumber: true })}
          placeholder="나이를 입력하세요"
        />
        {errors.age && (
          <p className="text-sm text-red-600">{errors.age.message}</p>
        )}
      </div>

      <Button type="submit" disabled={isSubmitting} className="w-full">
        {isSubmitting ? "제출 중..." : "제출"}
      </Button>
    </form>
  )
}
```

## 복잡한 폼 예시

```tsx
import { useForm, Controller } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import * as z from "zod"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

const profileSchema = z.object({
  firstName: z.string().min(1, "이름을 입력하세요"),
  lastName: z.string().min(1, "성을 입력하세요"),
  email: z.string().email("올바른 이메일을 입력하세요"),
  phone: z.string().min(10, "올바른 전화번호를 입력하세요"),
  country: z.string().min(1, "국가를 선택하세요"),
  bio: z.string().max(500, "자기소개는 500자 이내로 작성하세요"),
  gender: z.enum(["male", "female", "other"]),
  newsletter: z.boolean(),
  terms: z.boolean().refine(val => val === true, "약관에 동의해야 합니다")
})

type ProfileData = z.infer<typeof profileSchema>

export default function ComplexForm() {
  const {
    register,
    handleSubmit,
    control,
    formState: { errors, isSubmitting }
  } = useForm<ProfileData>({
    resolver: zodResolver(profileSchema),
    defaultValues: {
      newsletter: false,
      terms: false
    }
  })

  const onSubmit = async (data: ProfileData) => {
    await new Promise(resolve => setTimeout(resolve, 2000))
    console.log("프로필 데이터:", data)
  }

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6 max-w-2xl">
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="firstName">이름</Label>
          <Input
            id="firstName"
            {...register("firstName")}
            placeholder="이름"
          />
          {errors.firstName && (
            <p className="text-sm text-red-600">{errors.firstName.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="lastName">성</Label>
          <Input
            id="lastName"
            {...register("lastName")}
            placeholder="성"
          />
          {errors.lastName && (
            <p className="text-sm text-red-600">{errors.lastName.message}</p>
          )}
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="email">이메일</Label>
        <Input
          id="email"
          type="email"
          {...register("email")}
          placeholder="이메일 주소"
        />
        {errors.email && (
          <p className="text-sm text-red-600">{errors.email.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="phone">전화번호</Label>
        <Input
          id="phone"
          {...register("phone")}
          placeholder="010-1234-5678"
        />
        {errors.phone && (
          <p className="text-sm text-red-600">{errors.phone.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label>국가</Label>
        <Controller
          name="country"
          control={control}
          render={({ field }) => (
            <Select onValueChange={field.onChange} defaultValue={field.value}>
              <SelectTrigger>
                <SelectValue placeholder="국가를 선택하세요" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="kr">대한민국</SelectItem>
                <SelectItem value="us">미국</SelectItem>
                <SelectItem value="jp">일본</SelectItem>
                <SelectItem value="cn">중국</SelectItem>
              </SelectContent>
            </Select>
          )}
        />
        {errors.country && (
          <p className="text-sm text-red-600">{errors.country.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label>성별</Label>
        <Controller
          name="gender"
          control={control}
          render={({ field }) => (
            <RadioGroup onValueChange={field.onChange} defaultValue={field.value}>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="male" id="male" />
                <Label htmlFor="male">남성</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="female" id="female" />
                <Label htmlFor="female">여성</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="other" id="other" />
                <Label htmlFor="other">기타</Label>
              </div>
            </RadioGroup>
          )}
        />
        {errors.gender && (
          <p className="text-sm text-red-600">{errors.gender.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="bio">자기소개</Label>
        <Textarea
          id="bio"
          {...register("bio")}
          placeholder="자기소개를 작성하세요"
          rows={4}
        />
        {errors.bio && (
          <p className="text-sm text-red-600">{errors.bio.message}</p>
        )}
      </div>

      <div className="space-y-4">
        <Controller
          name="newsletter"
          control={control}
          render={({ field }) => (
            <div className="flex items-center space-x-2">
              <Checkbox
                id="newsletter"
                checked={field.value}
                onCheckedChange={field.onChange}
              />
              <Label htmlFor="newsletter">뉴스레터 구독</Label>
            </div>
          )}
        />

        <Controller
          name="terms"
          control={control}
          render={({ field }) => (
            <div className="flex items-center space-x-2">
              <Checkbox
                id="terms"
                checked={field.value}
                onCheckedChange={field.onChange}
              />
              <Label htmlFor="terms">이용약관에 동의합니다 *</Label>
            </div>
          )}
        />
        {errors.terms && (
          <p className="text-sm text-red-600">{errors.terms.message}</p>
        )}
      </div>

      <Button type="submit" disabled={isSubmitting} className="w-full">
        {isSubmitting ? "저장 중..." : "프로필 저장"}
      </Button>
    </form>
  )
}
```

## 주요 기능

### 폼 검증
- Zod 스키마를 사용한 타입 안전한 검증
- 실시간 검증
- 커스텀 에러 메시지

### 성능 최적화
- 불필요한 리렌더링 방지
- 언컨트롤드 컴포넌트 사용
- 효율적인 상태 관리

### 통합성
- shadcn/ui 컴포넌트와 완벽 통합
- Controller를 통한 커스텀 컴포넌트 연결
- TypeScript 지원

## 접근성

React Hook Form은 다음과 같은 접근성 기능을 제공합니다:

- 폼 필드 라벨링
- 에러 메시지 연결
- 키보드 네비게이션
- 스크린 리더 지원
7:["$","div",null,{"className":"prose prose-gray dark:prose-invert max-w-none","children":["$","$L12",null,{"content":"$13"}]}]
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
14:I[27345,["/_next/static/chunks/5d6ebc21204af686.js","/_next/static/chunks/274843f98fc0ce17.js"],"IconMark"]
b:{"metadata":[["$","title","0",{"children":"Design System Guide"}],["$","meta","1",{"name":"description","content":"A comprehensive design system guide with tokens, components, and playground"}],["$","link","2",{"rel":"icon","href":"/favicon.ico?favicon.0b3bf435.ico","sizes":"256x256","type":"image/x-icon"}],["$","$L14","3",{}]],"error":null,"digest":"$undefined"}
10:"$b:metadata"
